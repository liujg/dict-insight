/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p/>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package dictinsight.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-25")
public class HomeworkProtocol {
    public final static String HOMEWORK_CONTENT = "homework_content";
    public final static String HOMEWORK_SEGMENT = "homework_segment";
    public final static String USER_RECORD = "user_record";
    public final static String SUBMIT_RECORD = "submit_record";

    public interface Iface {

        public ByteBuffer getHomework(int examId) throws org.apache.thrift.TException;

        public ByteBuffer getRecords(int examId, String userId) throws org.apache.thrift.TException;

        public boolean submit(ByteBuffer record) throws org.apache.thrift.TException;

        public boolean deleteExamCache(int examId) throws org.apache.thrift.TException;

        public boolean deleteRecord(String userId, int examId) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void getHomework(int examId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getRecords(int examId, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void submit(ByteBuffer record, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void deleteExamCache(int examId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void deleteRecord(String userId, int examId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public ByteBuffer getHomework(int examId) throws org.apache.thrift.TException {
            send_getHomework(examId);
            return recv_getHomework();
        }

        public void send_getHomework(int examId) throws org.apache.thrift.TException {
            getHomework_args args = new getHomework_args();
            args.setExamId(examId);
            sendBase("getHomework", args);
        }

        public ByteBuffer recv_getHomework() throws org.apache.thrift.TException {
            getHomework_result result = new getHomework_result();
            receiveBase(result, "getHomework");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHomework failed: unknown result");
        }

        public ByteBuffer getRecords(int examId, String userId) throws org.apache.thrift.TException {
            send_getRecords(examId, userId);
            return recv_getRecords();
        }

        public void send_getRecords(int examId, String userId) throws org.apache.thrift.TException {
            getRecords_args args = new getRecords_args();
            args.setExamId(examId);
            args.setUserId(userId);
            sendBase("getRecords", args);
        }

        public ByteBuffer recv_getRecords() throws org.apache.thrift.TException {
            getRecords_result result = new getRecords_result();
            receiveBase(result, "getRecords");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecords failed: unknown result");
        }

        public boolean submit(ByteBuffer record) throws org.apache.thrift.TException {
            send_submit(record);
            return recv_submit();
        }

        public void send_submit(ByteBuffer record) throws org.apache.thrift.TException {
            submit_args args = new submit_args();
            args.setRecord(record);
            sendBase("submit", args);
        }

        public boolean recv_submit() throws org.apache.thrift.TException {
            submit_result result = new submit_result();
            receiveBase(result, "submit");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submit failed: unknown result");
        }

        public boolean deleteExamCache(int examId) throws org.apache.thrift.TException {
            send_deleteExamCache(examId);
            return recv_deleteExamCache();
        }

        public void send_deleteExamCache(int examId) throws org.apache.thrift.TException {
            deleteExamCache_args args = new deleteExamCache_args();
            args.setExamId(examId);
            sendBase("deleteExamCache", args);
        }

        public boolean recv_deleteExamCache() throws org.apache.thrift.TException {
            deleteExamCache_result result = new deleteExamCache_result();
            receiveBase(result, "deleteExamCache");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteExamCache failed: unknown result");
        }

        public boolean deleteRecord(String userId, int examId) throws org.apache.thrift.TException {
            send_deleteRecord(userId, examId);
            return recv_deleteRecord();
        }

        public void send_deleteRecord(String userId, int examId) throws org.apache.thrift.TException {
            deleteRecord_args args = new deleteRecord_args();
            args.setUserId(userId);
            args.setExamId(examId);
            sendBase("deleteRecord", args);
        }

        public boolean recv_deleteRecord() throws org.apache.thrift.TException {
            deleteRecord_result result = new deleteRecord_result();
            receiveBase(result, "deleteRecord");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteRecord failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void getHomework(int examId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getHomework_call method_call = new getHomework_call(examId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getHomework_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int examId;

            public getHomework_call(int examId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.examId = examId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHomework", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getHomework_args args = new getHomework_args();
                args.setExamId(examId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ByteBuffer getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getHomework();
            }
        }

        public void getRecords(int examId, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getRecords_call method_call = new getRecords_call(examId, userId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getRecords_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int examId;
            private String userId;

            public getRecords_call(int examId, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.examId = examId;
                this.userId = userId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecords", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getRecords_args args = new getRecords_args();
                args.setExamId(examId);
                args.setUserId(userId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ByteBuffer getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getRecords();
            }
        }

        public void submit(ByteBuffer record, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            submit_call method_call = new submit_call(record, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class submit_call extends org.apache.thrift.async.TAsyncMethodCall {
            private ByteBuffer record;

            public submit_call(ByteBuffer record, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.record = record;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submit", org.apache.thrift.protocol.TMessageType.CALL, 0));
                submit_args args = new submit_args();
                args.setRecord(record);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_submit();
            }
        }

        public void deleteExamCache(int examId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            deleteExamCache_call method_call = new deleteExamCache_call(examId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteExamCache_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int examId;

            public deleteExamCache_call(int examId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.examId = examId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteExamCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteExamCache_args args = new deleteExamCache_args();
                args.setExamId(examId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_deleteExamCache();
            }
        }

        public void deleteRecord(String userId, int examId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            deleteRecord_call method_call = new deleteRecord_call(userId, examId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String userId;
            private int examId;

            public deleteRecord_call(String userId, int examId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.examId = examId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteRecord_args args = new deleteRecord_args();
                args.setUserId(userId);
                args.setExamId(examId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_deleteRecord();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("getHomework", new getHomework());
            processMap.put("getRecords", new getRecords());
            processMap.put("submit", new submit());
            processMap.put("deleteExamCache", new deleteExamCache());
            processMap.put("deleteRecord", new deleteRecord());
            return processMap;
        }

        public static class getHomework<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHomework_args> {
            public getHomework() {
                super("getHomework");
            }

            public getHomework_args getEmptyArgsInstance() {
                return new getHomework_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getHomework_result getResult(I iface, getHomework_args args) throws org.apache.thrift.TException {
                getHomework_result result = new getHomework_result();
                result.success = iface.getHomework(args.examId);
                return result;
            }
        }

        public static class getRecords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecords_args> {
            public getRecords() {
                super("getRecords");
            }

            public getRecords_args getEmptyArgsInstance() {
                return new getRecords_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getRecords_result getResult(I iface, getRecords_args args) throws org.apache.thrift.TException {
                getRecords_result result = new getRecords_result();
                result.success = iface.getRecords(args.examId, args.userId);
                return result;
            }
        }

        public static class submit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submit_args> {
            public submit() {
                super("submit");
            }

            public submit_args getEmptyArgsInstance() {
                return new submit_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public submit_result getResult(I iface, submit_args args) throws org.apache.thrift.TException {
                submit_result result = new submit_result();
                result.success = iface.submit(args.record);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class deleteExamCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteExamCache_args> {
            public deleteExamCache() {
                super("deleteExamCache");
            }

            public deleteExamCache_args getEmptyArgsInstance() {
                return new deleteExamCache_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public deleteExamCache_result getResult(I iface, deleteExamCache_args args) throws org.apache.thrift.TException {
                deleteExamCache_result result = new deleteExamCache_result();
                result.success = iface.deleteExamCache(args.examId);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class deleteRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRecord_args> {
            public deleteRecord() {
                super("deleteRecord");
            }

            public deleteRecord_args getEmptyArgsInstance() {
                return new deleteRecord_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public deleteRecord_result getResult(I iface, deleteRecord_args args) throws org.apache.thrift.TException {
                deleteRecord_result result = new deleteRecord_result();
                result.success = iface.deleteRecord(args.userId, args.examId);
                result.setSuccessIsSet(true);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("getHomework", new getHomework());
            processMap.put("getRecords", new getRecords());
            processMap.put("submit", new submit());
            processMap.put("deleteExamCache", new deleteExamCache());
            processMap.put("deleteRecord", new deleteRecord());
            return processMap;
        }

        public static class getHomework<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHomework_args, ByteBuffer> {
            public getHomework() {
                super("getHomework");
            }

            public getHomework_args getEmptyArgsInstance() {
                return new getHomework_args();
            }

            public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<ByteBuffer>() {
                    public void onComplete(ByteBuffer o) {
                        getHomework_result result = new getHomework_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getHomework_result result = new getHomework_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getHomework_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
                iface.getHomework(args.examId, resultHandler);
            }
        }

        public static class getRecords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecords_args, ByteBuffer> {
            public getRecords() {
                super("getRecords");
            }

            public getRecords_args getEmptyArgsInstance() {
                return new getRecords_args();
            }

            public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<ByteBuffer>() {
                    public void onComplete(ByteBuffer o) {
                        getRecords_result result = new getRecords_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getRecords_result result = new getRecords_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getRecords_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
                iface.getRecords(args.examId, args.userId, resultHandler);
            }
        }

        public static class submit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submit_args, Boolean> {
            public submit() {
                super("submit");
            }

            public submit_args getEmptyArgsInstance() {
                return new submit_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        submit_result result = new submit_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        submit_result result = new submit_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, submit_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.submit(args.record, resultHandler);
            }
        }

        public static class deleteExamCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteExamCache_args, Boolean> {
            public deleteExamCache() {
                super("deleteExamCache");
            }

            public deleteExamCache_args getEmptyArgsInstance() {
                return new deleteExamCache_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        deleteExamCache_result result = new deleteExamCache_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        deleteExamCache_result result = new deleteExamCache_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteExamCache_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.deleteExamCache(args.examId, resultHandler);
            }
        }

        public static class deleteRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteRecord_args, Boolean> {
            public deleteRecord() {
                super("deleteRecord");
            }

            public deleteRecord_args getEmptyArgsInstance() {
                return new deleteRecord_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        deleteRecord_result result = new deleteRecord_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        deleteRecord_result result = new deleteRecord_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.deleteRecord(args.userId, args.examId, resultHandler);
            }
        }

    }

    public static class getHomework_args implements org.apache.thrift.TBase<getHomework_args, getHomework_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHomework_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHomework_args");

        private static final org.apache.thrift.protocol.TField EXAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examId", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getHomework_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getHomework_argsTupleSchemeFactory());
        }

        public int examId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EXAM_ID((short) 1, "examId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EXAM_ID
                        return EXAM_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __EXAMID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EXAM_ID, new org.apache.thrift.meta_data.FieldMetaData("examId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHomework_args.class, metaDataMap);
        }

        public getHomework_args() {
        }

        public getHomework_args(
                int examId) {
            this();
            this.examId = examId;
            setExamIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHomework_args(getHomework_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.examId = other.examId;
        }

        public getHomework_args deepCopy() {
            return new getHomework_args(this);
        }

        @Override
        public void clear() {
            setExamIdIsSet(false);
            this.examId = 0;
        }

        public int getExamId() {
            return this.examId;
        }

        public getHomework_args setExamId(int examId) {
            this.examId = examId;
            setExamIdIsSet(true);
            return this;
        }

        public void unsetExamId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMID_ISSET_ID);
        }

        /** Returns true if field examId is set (has been assigned a value) and false otherwise */
        public boolean isSetExamId() {
            return EncodingUtils.testBit(__isset_bitfield, __EXAMID_ISSET_ID);
        }

        public void setExamIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case EXAM_ID:
                    if (value == null) {
                        unsetExamId();
                    } else {
                        setExamId((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case EXAM_ID:
                    return getExamId();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case EXAM_ID:
                    return isSetExamId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getHomework_args)
                return this.equals((getHomework_args) that);
            return false;
        }

        public boolean equals(getHomework_args that) {
            if (that == null)
                return false;

            boolean this_present_examId = true;
            boolean that_present_examId = true;
            if (this_present_examId || that_present_examId) {
                if (!(this_present_examId && that_present_examId))
                    return false;
                if (this.examId != that.examId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_examId = true;
            list.add(present_examId);
            if (present_examId)
                list.add(examId);

            return list.hashCode();
        }

        @Override
        public int compareTo(getHomework_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetExamId()).compareTo(other.isSetExamId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetExamId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examId, other.examId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getHomework_args(");
            boolean first = true;

            sb.append("examId:");
            sb.append(this.examId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHomework_argsStandardSchemeFactory implements SchemeFactory {
            public getHomework_argsStandardScheme getScheme() {
                return new getHomework_argsStandardScheme();
            }
        }

        private static class getHomework_argsStandardScheme extends StandardScheme<getHomework_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHomework_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EXAM_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.examId = iprot.readI32();
                                struct.setExamIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHomework_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(EXAM_ID_FIELD_DESC);
                oprot.writeI32(struct.examId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHomework_argsTupleSchemeFactory implements SchemeFactory {
            public getHomework_argsTupleScheme getScheme() {
                return new getHomework_argsTupleScheme();
            }
        }

        private static class getHomework_argsTupleScheme extends TupleScheme<getHomework_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHomework_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetExamId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetExamId()) {
                    oprot.writeI32(struct.examId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHomework_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.examId = iprot.readI32();
                    struct.setExamIdIsSet(true);
                }
            }
        }

    }

    public static class getHomework_result implements org.apache.thrift.TBase<getHomework_result, getHomework_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHomework_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHomework_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getHomework_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getHomework_resultTupleSchemeFactory());
        }

        public ByteBuffer success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHomework_result.class, metaDataMap);
        }

        public getHomework_result() {
        }

        public getHomework_result(
                ByteBuffer success) {
            this();
            this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHomework_result(getHomework_result other) {
            if (other.isSetSuccess()) {
                this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
            }
        }

        public getHomework_result deepCopy() {
            return new getHomework_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public byte[] getSuccess() {
            setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
            return success == null ? null : success.array();
        }

        public ByteBuffer bufferForSuccess() {
            return org.apache.thrift.TBaseHelper.copyBinary(success);
        }

        public getHomework_result setSuccess(byte[] success) {
            this.success = success == null ? (ByteBuffer) null : ByteBuffer.wrap(Arrays.copyOf(success, success.length));
            return this;
        }

        public getHomework_result setSuccess(ByteBuffer success) {
            this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((ByteBuffer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getHomework_result)
                return this.equals((getHomework_result) that);
            return false;
        }

        public boolean equals(getHomework_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getHomework_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getHomework_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.success, sb);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHomework_resultStandardSchemeFactory implements SchemeFactory {
            public getHomework_resultStandardScheme getScheme() {
                return new getHomework_resultStandardScheme();
            }
        }

        private static class getHomework_resultStandardScheme extends StandardScheme<getHomework_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHomework_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readBinary();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHomework_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBinary(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHomework_resultTupleSchemeFactory implements SchemeFactory {
            public getHomework_resultTupleScheme getScheme() {
                return new getHomework_resultTupleScheme();
            }
        }

        private static class getHomework_resultTupleScheme extends TupleScheme<getHomework_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHomework_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBinary(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHomework_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBinary();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getRecords_args implements org.apache.thrift.TBase<getRecords_args, getRecords_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecords_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecords_args");

        private static final org.apache.thrift.protocol.TField EXAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examId", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getRecords_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getRecords_argsTupleSchemeFactory());
        }

        public int examId; // required
        public String userId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EXAM_ID((short) 1, "examId"),
            USER_ID((short) 2, "userId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EXAM_ID
                        return EXAM_ID;
                    case 2: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __EXAMID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EXAM_ID, new org.apache.thrift.meta_data.FieldMetaData("examId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecords_args.class, metaDataMap);
        }

        public getRecords_args() {
        }

        public getRecords_args(
                int examId,
                String userId) {
            this();
            this.examId = examId;
            setExamIdIsSet(true);
            this.userId = userId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecords_args(getRecords_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.examId = other.examId;
            if (other.isSetUserId()) {
                this.userId = other.userId;
            }
        }

        public getRecords_args deepCopy() {
            return new getRecords_args(this);
        }

        @Override
        public void clear() {
            setExamIdIsSet(false);
            this.examId = 0;
            this.userId = null;
        }

        public int getExamId() {
            return this.examId;
        }

        public getRecords_args setExamId(int examId) {
            this.examId = examId;
            setExamIdIsSet(true);
            return this;
        }

        public void unsetExamId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMID_ISSET_ID);
        }

        /** Returns true if field examId is set (has been assigned a value) and false otherwise */
        public boolean isSetExamId() {
            return EncodingUtils.testBit(__isset_bitfield, __EXAMID_ISSET_ID);
        }

        public void setExamIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMID_ISSET_ID, value);
        }

        public String getUserId() {
            return this.userId;
        }

        public getRecords_args setUserId(String userId) {
            this.userId = userId;
            return this;
        }

        public void unsetUserId() {
            this.userId = null;
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return this.userId != null;
        }

        public void setUserIdIsSet(boolean value) {
            if (!value) {
                this.userId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case EXAM_ID:
                    if (value == null) {
                        unsetExamId();
                    } else {
                        setExamId((Integer) value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case EXAM_ID:
                    return getExamId();

                case USER_ID:
                    return getUserId();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case EXAM_ID:
                    return isSetExamId();
                case USER_ID:
                    return isSetUserId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecords_args)
                return this.equals((getRecords_args) that);
            return false;
        }

        public boolean equals(getRecords_args that) {
            if (that == null)
                return false;

            boolean this_present_examId = true;
            boolean that_present_examId = true;
            if (this_present_examId || that_present_examId) {
                if (!(this_present_examId && that_present_examId))
                    return false;
                if (this.examId != that.examId)
                    return false;
            }

            boolean this_present_userId = true && this.isSetUserId();
            boolean that_present_userId = true && that.isSetUserId();
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (!this.userId.equals(that.userId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_examId = true;
            list.add(present_examId);
            if (present_examId)
                list.add(examId);

            boolean present_userId = true && (isSetUserId());
            list.add(present_userId);
            if (present_userId)
                list.add(userId);

            return list.hashCode();
        }

        @Override
        public int compareTo(getRecords_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetExamId()).compareTo(other.isSetExamId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetExamId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examId, other.examId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getRecords_args(");
            boolean first = true;

            sb.append("examId:");
            sb.append(this.examId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("userId:");
            if (this.userId == null) {
                sb.append("null");
            } else {
                sb.append(this.userId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecords_argsStandardSchemeFactory implements SchemeFactory {
            public getRecords_argsStandardScheme getScheme() {
                return new getRecords_argsStandardScheme();
            }
        }

        private static class getRecords_argsStandardScheme extends StandardScheme<getRecords_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecords_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EXAM_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.examId = iprot.readI32();
                                struct.setExamIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userId = iprot.readString();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecords_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(EXAM_ID_FIELD_DESC);
                oprot.writeI32(struct.examId);
                oprot.writeFieldEnd();
                if (struct.userId != null) {
                    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                    oprot.writeString(struct.userId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecords_argsTupleSchemeFactory implements SchemeFactory {
            public getRecords_argsTupleScheme getScheme() {
                return new getRecords_argsTupleScheme();
            }
        }

        private static class getRecords_argsTupleScheme extends TupleScheme<getRecords_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecords_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetExamId()) {
                    optionals.set(0);
                }
                if (struct.isSetUserId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetExamId()) {
                    oprot.writeI32(struct.examId);
                }
                if (struct.isSetUserId()) {
                    oprot.writeString(struct.userId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecords_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.examId = iprot.readI32();
                    struct.setExamIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.userId = iprot.readString();
                    struct.setUserIdIsSet(true);
                }
            }
        }

    }

    public static class getRecords_result implements org.apache.thrift.TBase<getRecords_result, getRecords_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecords_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecords_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getRecords_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getRecords_resultTupleSchemeFactory());
        }

        public ByteBuffer success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecords_result.class, metaDataMap);
        }

        public getRecords_result() {
        }

        public getRecords_result(
                ByteBuffer success) {
            this();
            this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecords_result(getRecords_result other) {
            if (other.isSetSuccess()) {
                this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
            }
        }

        public getRecords_result deepCopy() {
            return new getRecords_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public byte[] getSuccess() {
            setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
            return success == null ? null : success.array();
        }

        public ByteBuffer bufferForSuccess() {
            return org.apache.thrift.TBaseHelper.copyBinary(success);
        }

        public getRecords_result setSuccess(byte[] success) {
            this.success = success == null ? (ByteBuffer) null : ByteBuffer.wrap(Arrays.copyOf(success, success.length));
            return this;
        }

        public getRecords_result setSuccess(ByteBuffer success) {
            this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((ByteBuffer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecords_result)
                return this.equals((getRecords_result) that);
            return false;
        }

        public boolean equals(getRecords_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getRecords_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getRecords_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.success, sb);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecords_resultStandardSchemeFactory implements SchemeFactory {
            public getRecords_resultStandardScheme getScheme() {
                return new getRecords_resultStandardScheme();
            }
        }

        private static class getRecords_resultStandardScheme extends StandardScheme<getRecords_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecords_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readBinary();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecords_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBinary(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecords_resultTupleSchemeFactory implements SchemeFactory {
            public getRecords_resultTupleScheme getScheme() {
                return new getRecords_resultTupleScheme();
            }
        }

        private static class getRecords_resultTupleScheme extends TupleScheme<getRecords_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecords_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBinary(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecords_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBinary();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class submit_args implements org.apache.thrift.TBase<submit_args, submit_args._Fields>, java.io.Serializable, Cloneable, Comparable<submit_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submit_args");

        private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new submit_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new submit_argsTupleSchemeFactory());
        }

        public ByteBuffer record; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            RECORD((short) 1, "record");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // RECORD
                        return RECORD;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submit_args.class, metaDataMap);
        }

        public submit_args() {
        }

        public submit_args(
                ByteBuffer record) {
            this();
            this.record = org.apache.thrift.TBaseHelper.copyBinary(record);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public submit_args(submit_args other) {
            if (other.isSetRecord()) {
                this.record = org.apache.thrift.TBaseHelper.copyBinary(other.record);
            }
        }

        public submit_args deepCopy() {
            return new submit_args(this);
        }

        @Override
        public void clear() {
            this.record = null;
        }

        public byte[] getRecord() {
            setRecord(org.apache.thrift.TBaseHelper.rightSize(record));
            return record == null ? null : record.array();
        }

        public ByteBuffer bufferForRecord() {
            return org.apache.thrift.TBaseHelper.copyBinary(record);
        }

        public submit_args setRecord(byte[] record) {
            this.record = record == null ? (ByteBuffer) null : ByteBuffer.wrap(Arrays.copyOf(record, record.length));
            return this;
        }

        public submit_args setRecord(ByteBuffer record) {
            this.record = org.apache.thrift.TBaseHelper.copyBinary(record);
            return this;
        }

        public void unsetRecord() {
            this.record = null;
        }

        /** Returns true if field record is set (has been assigned a value) and false otherwise */
        public boolean isSetRecord() {
            return this.record != null;
        }

        public void setRecordIsSet(boolean value) {
            if (!value) {
                this.record = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case RECORD:
                    if (value == null) {
                        unsetRecord();
                    } else {
                        setRecord((ByteBuffer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case RECORD:
                    return getRecord();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case RECORD:
                    return isSetRecord();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof submit_args)
                return this.equals((submit_args) that);
            return false;
        }

        public boolean equals(submit_args that) {
            if (that == null)
                return false;

            boolean this_present_record = true && this.isSetRecord();
            boolean that_present_record = true && that.isSetRecord();
            if (this_present_record || that_present_record) {
                if (!(this_present_record && that_present_record))
                    return false;
                if (!this.record.equals(that.record))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_record = true && (isSetRecord());
            list.add(present_record);
            if (present_record)
                list.add(record);

            return list.hashCode();
        }

        @Override
        public int compareTo(submit_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRecord()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("submit_args(");
            boolean first = true;

            sb.append("record:");
            if (this.record == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.record, sb);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class submit_argsStandardSchemeFactory implements SchemeFactory {
            public submit_argsStandardScheme getScheme() {
                return new submit_argsStandardScheme();
            }
        }

        private static class submit_argsStandardScheme extends StandardScheme<submit_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, submit_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // RECORD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.record = iprot.readBinary();
                                struct.setRecordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, submit_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.record != null) {
                    oprot.writeFieldBegin(RECORD_FIELD_DESC);
                    oprot.writeBinary(struct.record);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class submit_argsTupleSchemeFactory implements SchemeFactory {
            public submit_argsTupleScheme getScheme() {
                return new submit_argsTupleScheme();
            }
        }

        private static class submit_argsTupleScheme extends TupleScheme<submit_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, submit_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRecord()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRecord()) {
                    oprot.writeBinary(struct.record);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, submit_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.record = iprot.readBinary();
                    struct.setRecordIsSet(true);
                }
            }
        }

    }

    public static class submit_result implements org.apache.thrift.TBase<submit_result, submit_result._Fields>, java.io.Serializable, Cloneable, Comparable<submit_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submit_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new submit_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new submit_resultTupleSchemeFactory());
        }

        public boolean success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submit_result.class, metaDataMap);
        }

        public submit_result() {
        }

        public submit_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public submit_result(submit_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public submit_result deepCopy() {
            return new submit_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public submit_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof submit_result)
                return this.equals((submit_result) that);
            return false;
        }

        public boolean equals(submit_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(submit_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("submit_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class submit_resultStandardSchemeFactory implements SchemeFactory {
            public submit_resultStandardScheme getScheme() {
                return new submit_resultStandardScheme();
            }
        }

        private static class submit_resultStandardScheme extends StandardScheme<submit_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, submit_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, submit_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class submit_resultTupleSchemeFactory implements SchemeFactory {
            public submit_resultTupleScheme getScheme() {
                return new submit_resultTupleScheme();
            }
        }

        private static class submit_resultTupleScheme extends TupleScheme<submit_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, submit_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, submit_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class deleteExamCache_args implements org.apache.thrift.TBase<deleteExamCache_args, deleteExamCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteExamCache_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteExamCache_args");

        private static final org.apache.thrift.protocol.TField EXAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examId", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deleteExamCache_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteExamCache_argsTupleSchemeFactory());
        }

        public int examId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EXAM_ID((short) 1, "examId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EXAM_ID
                        return EXAM_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __EXAMID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EXAM_ID, new org.apache.thrift.meta_data.FieldMetaData("examId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteExamCache_args.class, metaDataMap);
        }

        public deleteExamCache_args() {
        }

        public deleteExamCache_args(
                int examId) {
            this();
            this.examId = examId;
            setExamIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteExamCache_args(deleteExamCache_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.examId = other.examId;
        }

        public deleteExamCache_args deepCopy() {
            return new deleteExamCache_args(this);
        }

        @Override
        public void clear() {
            setExamIdIsSet(false);
            this.examId = 0;
        }

        public int getExamId() {
            return this.examId;
        }

        public deleteExamCache_args setExamId(int examId) {
            this.examId = examId;
            setExamIdIsSet(true);
            return this;
        }

        public void unsetExamId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMID_ISSET_ID);
        }

        /** Returns true if field examId is set (has been assigned a value) and false otherwise */
        public boolean isSetExamId() {
            return EncodingUtils.testBit(__isset_bitfield, __EXAMID_ISSET_ID);
        }

        public void setExamIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case EXAM_ID:
                    if (value == null) {
                        unsetExamId();
                    } else {
                        setExamId((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case EXAM_ID:
                    return getExamId();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case EXAM_ID:
                    return isSetExamId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteExamCache_args)
                return this.equals((deleteExamCache_args) that);
            return false;
        }

        public boolean equals(deleteExamCache_args that) {
            if (that == null)
                return false;

            boolean this_present_examId = true;
            boolean that_present_examId = true;
            if (this_present_examId || that_present_examId) {
                if (!(this_present_examId && that_present_examId))
                    return false;
                if (this.examId != that.examId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_examId = true;
            list.add(present_examId);
            if (present_examId)
                list.add(examId);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteExamCache_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetExamId()).compareTo(other.isSetExamId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetExamId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examId, other.examId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteExamCache_args(");
            boolean first = true;

            sb.append("examId:");
            sb.append(this.examId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteExamCache_argsStandardSchemeFactory implements SchemeFactory {
            public deleteExamCache_argsStandardScheme getScheme() {
                return new deleteExamCache_argsStandardScheme();
            }
        }

        private static class deleteExamCache_argsStandardScheme extends StandardScheme<deleteExamCache_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteExamCache_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EXAM_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.examId = iprot.readI32();
                                struct.setExamIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteExamCache_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(EXAM_ID_FIELD_DESC);
                oprot.writeI32(struct.examId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteExamCache_argsTupleSchemeFactory implements SchemeFactory {
            public deleteExamCache_argsTupleScheme getScheme() {
                return new deleteExamCache_argsTupleScheme();
            }
        }

        private static class deleteExamCache_argsTupleScheme extends TupleScheme<deleteExamCache_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteExamCache_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetExamId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetExamId()) {
                    oprot.writeI32(struct.examId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteExamCache_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.examId = iprot.readI32();
                    struct.setExamIdIsSet(true);
                }
            }
        }

    }

    public static class deleteExamCache_result implements org.apache.thrift.TBase<deleteExamCache_result, deleteExamCache_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteExamCache_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteExamCache_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deleteExamCache_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteExamCache_resultTupleSchemeFactory());
        }

        public boolean success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteExamCache_result.class, metaDataMap);
        }

        public deleteExamCache_result() {
        }

        public deleteExamCache_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteExamCache_result(deleteExamCache_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public deleteExamCache_result deepCopy() {
            return new deleteExamCache_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public deleteExamCache_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteExamCache_result)
                return this.equals((deleteExamCache_result) that);
            return false;
        }

        public boolean equals(deleteExamCache_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteExamCache_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteExamCache_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteExamCache_resultStandardSchemeFactory implements SchemeFactory {
            public deleteExamCache_resultStandardScheme getScheme() {
                return new deleteExamCache_resultStandardScheme();
            }
        }

        private static class deleteExamCache_resultStandardScheme extends StandardScheme<deleteExamCache_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteExamCache_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteExamCache_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteExamCache_resultTupleSchemeFactory implements SchemeFactory {
            public deleteExamCache_resultTupleScheme getScheme() {
                return new deleteExamCache_resultTupleScheme();
            }
        }

        private static class deleteExamCache_resultTupleScheme extends TupleScheme<deleteExamCache_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteExamCache_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteExamCache_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class deleteRecord_args implements org.apache.thrift.TBase<deleteRecord_args, deleteRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRecord_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRecord_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField EXAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examId", org.apache.thrift.protocol.TType.I32, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deleteRecord_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteRecord_argsTupleSchemeFactory());
        }

        public String userId; // required
        public int examId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short) 1, "userId"),
            EXAM_ID((short) 2, "examId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // EXAM_ID
                        return EXAM_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __EXAMID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.EXAM_ID, new org.apache.thrift.meta_data.FieldMetaData("examId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRecord_args.class, metaDataMap);
        }

        public deleteRecord_args() {
        }

        public deleteRecord_args(
                String userId,
                int examId) {
            this();
            this.userId = userId;
            this.examId = examId;
            setExamIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteRecord_args(deleteRecord_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetUserId()) {
                this.userId = other.userId;
            }
            this.examId = other.examId;
        }

        public deleteRecord_args deepCopy() {
            return new deleteRecord_args(this);
        }

        @Override
        public void clear() {
            this.userId = null;
            setExamIdIsSet(false);
            this.examId = 0;
        }

        public String getUserId() {
            return this.userId;
        }

        public deleteRecord_args setUserId(String userId) {
            this.userId = userId;
            return this;
        }

        public void unsetUserId() {
            this.userId = null;
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return this.userId != null;
        }

        public void setUserIdIsSet(boolean value) {
            if (!value) {
                this.userId = null;
            }
        }

        public int getExamId() {
            return this.examId;
        }

        public deleteRecord_args setExamId(int examId) {
            this.examId = examId;
            setExamIdIsSet(true);
            return this;
        }

        public void unsetExamId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMID_ISSET_ID);
        }

        /** Returns true if field examId is set (has been assigned a value) and false otherwise */
        public boolean isSetExamId() {
            return EncodingUtils.testBit(__isset_bitfield, __EXAMID_ISSET_ID);
        }

        public void setExamIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((String) value);
                    }
                    break;

                case EXAM_ID:
                    if (value == null) {
                        unsetExamId();
                    } else {
                        setExamId((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case EXAM_ID:
                    return getExamId();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case EXAM_ID:
                    return isSetExamId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteRecord_args)
                return this.equals((deleteRecord_args) that);
            return false;
        }

        public boolean equals(deleteRecord_args that) {
            if (that == null)
                return false;

            boolean this_present_userId = true && this.isSetUserId();
            boolean that_present_userId = true && that.isSetUserId();
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (!this.userId.equals(that.userId))
                    return false;
            }

            boolean this_present_examId = true;
            boolean that_present_examId = true;
            if (this_present_examId || that_present_examId) {
                if (!(this_present_examId && that_present_examId))
                    return false;
                if (this.examId != that.examId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_userId = true && (isSetUserId());
            list.add(present_userId);
            if (present_userId)
                list.add(userId);

            boolean present_examId = true;
            list.add(present_examId);
            if (present_examId)
                list.add(examId);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteRecord_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetExamId()).compareTo(other.isSetExamId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetExamId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examId, other.examId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteRecord_args(");
            boolean first = true;

            sb.append("userId:");
            if (this.userId == null) {
                sb.append("null");
            } else {
                sb.append(this.userId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("examId:");
            sb.append(this.examId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteRecord_argsStandardSchemeFactory implements SchemeFactory {
            public deleteRecord_argsStandardScheme getScheme() {
                return new deleteRecord_argsStandardScheme();
            }
        }

        private static class deleteRecord_argsStandardScheme extends StandardScheme<deleteRecord_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userId = iprot.readString();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // EXAM_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.examId = iprot.readI32();
                                struct.setExamIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRecord_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userId != null) {
                    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                    oprot.writeString(struct.userId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(EXAM_ID_FIELD_DESC);
                oprot.writeI32(struct.examId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteRecord_argsTupleSchemeFactory implements SchemeFactory {
            public deleteRecord_argsTupleScheme getScheme() {
                return new deleteRecord_argsTupleScheme();
            }
        }

        private static class deleteRecord_argsTupleScheme extends TupleScheme<deleteRecord_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteRecord_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetExamId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetUserId()) {
                    oprot.writeString(struct.userId);
                }
                if (struct.isSetExamId()) {
                    oprot.writeI32(struct.examId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteRecord_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.userId = iprot.readString();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.examId = iprot.readI32();
                    struct.setExamIdIsSet(true);
                }
            }
        }

    }

    public static class deleteRecord_result implements org.apache.thrift.TBase<deleteRecord_result, deleteRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRecord_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRecord_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deleteRecord_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteRecord_resultTupleSchemeFactory());
        }

        public boolean success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRecord_result.class, metaDataMap);
        }

        public deleteRecord_result() {
        }

        public deleteRecord_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteRecord_result(deleteRecord_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public deleteRecord_result deepCopy() {
            return new deleteRecord_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public deleteRecord_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteRecord_result)
                return this.equals((deleteRecord_result) that);
            return false;
        }

        public boolean equals(deleteRecord_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteRecord_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteRecord_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteRecord_resultStandardSchemeFactory implements SchemeFactory {
            public deleteRecord_resultStandardScheme getScheme() {
                return new deleteRecord_resultStandardScheme();
            }
        }

        private static class deleteRecord_resultStandardScheme extends StandardScheme<deleteRecord_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRecord_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteRecord_resultTupleSchemeFactory implements SchemeFactory {
            public deleteRecord_resultTupleScheme getScheme() {
                return new deleteRecord_resultTupleScheme();
            }
        }

        private static class deleteRecord_resultTupleScheme extends TupleScheme<deleteRecord_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteRecord_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteRecord_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
